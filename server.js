'use strict';
let app = require('express')();

// log it!
app.use(require('morgan')('dev'));

// Session set-up
let session = require('express-session');
let FileStore = require('session-file-store')(session);

app.use(session({
  name: 'server-session-cookie-id',
  secret: 'your very secret secret',
  saveUninitialized: true,
  resave: true,
  store: new FileStore()
}));

// print the session out
// app.use((req, res, next) => {
//   console.log('req.session', req.session);
//   return next();
// });

app.get('/', (req, res) => {
  res.send('Hey, we are in session!');
});

let server = app.listen(8080, () => {
  let host = server.address().address;
  let port = server.address().port;

  console.log('Hey, I am in session at http://%s:%s', host, port);
});

// Install morgan to log and allow a better view of wwhat's going on
// Here we add session persistence via cookies. We can use this to track user visite
// and other stuff. 
// Install
// 1) express-session - find options here: https://github.com/expressjs/session
// 2) session-file-store (uses JSON) in local sessions folder. Great to view what's happening. For better options - check here:
// https://github.com/expressjs/session#compatible-session-stores
// Only difference is that now we have a new property added to the req object passed through the middleware chain. you can console.log the session by clearing the comment above.
// Please use curl, httpie to view what's going on. Norgan output is also interesting here. 
// Check out cookies in the browser and you can see the cookie there. Cookie is auto-generated by express-session.
// Even cooler for learning, check out the sessions folder.
// Note that cookies are created if not present, if they are, the cookie is parsed, and the correct session is fetched from the session store. Cool indeed. Of course session are unique across browsers.